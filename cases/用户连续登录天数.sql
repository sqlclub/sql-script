/*
需求:
要求统计用户连续登录的天数
数据如下:
uid,login_time
1,'2016-11-25 13:30:45'
1,'2016-11-24 13:30:45'
1,'2016-11-24 10:30:45'
1,'2016-11-24 09:30:45'
1,'2016-11-23 09:30:45'
1,'2016-11-10 09:30:45'
1,'2016-11-09 09:30:45'
1,'2016-11-01 09:30:45'
1,'2016-10-31 09:30:45'
2,'2016-11-25 13:30:45'
2,'2016-11-24 13:30:45'
2,'2016-11-23 10:30:45'
2,'2016-11-22 09:30:45'
2,'2016-11-21 09:30:45'
2,'2016-11-20 09:30:45'
2,'2016-11-19 09:30:45'
2,'2016-11-02 09:30:45'
2,'2016-11-01 09:30:45'
2,'2016-10-31 09:30:45'
2,'2016-10-30 09:30:45'
2,'2016-10-29 09:30:45'
*/

-- 1. 建表
set hive.exec.mode.local.auto=true;   --开启Hive的本地模式

drop table if exists user_login;
create table user_login(
    uid int,
    login_time string);

insert into user_login values
(1,'2016-11-25 13:30:45'),
(1,'2016-11-24 13:30:45'),
(1,'2016-11-24 10:30:45'),
(1,'2016-11-24 09:30:45'),
(1,'2016-11-23 09:30:45'),
(1,'2016-11-10 09:30:45'),
(1,'2016-11-09 09:30:45'),
(1,'2016-11-01 09:30:45'),
(1,'2016-10-31 09:30:45'),
(2,'2016-11-25 13:30:45'),
(2,'2016-11-24 13:30:45'),
(2,'2016-11-23 10:30:45'),
(2,'2016-11-22 09:30:45'),
(2,'2016-11-21 09:30:45'),
(2,'2016-11-20 09:30:45'),
(2,'2016-11-19 09:30:45'),
(2,'2016-11-02 09:30:45'),
(2,'2016-11-01 09:30:45'),
(2,'2016-10-31 09:30:45'),
(2,'2016-10-30 09:30:45'),
(2,'2016-10-29 09:30:45');


-- 2. 处理

select b.uid,
min(b.login_time) login_min, --起始登录日期
max(b.login_time) login_max, --结束登录日期
count(b.mark_day) login_days --连续登录天数
from (
  -- 增加mark day
  select a.*, date_sub(login_time, a.rank) mark_day from (
    -- 每个用户按登录时间进行排序
    select *,
    rank() over(partition by uid order by login_time asc) as rank
    from user_login
  ) a
) b group by b.uid, b.mark_day;


/*
结果:
1	2016-10-31 09:30:45	2016-11-01 09:30:45	2
1	2016-11-09 09:30:45	2016-11-10 09:30:45	2
1	2016-11-24 13:30:45	2016-11-25 13:30:45	2
1	2016-11-24 10:30:45	2016-11-24 10:30:45	1
1	2016-11-23 09:30:45	2016-11-24 09:30:45	2
2	2016-10-29 09:30:45	2016-11-02 09:30:45	5
2	2016-11-19 09:30:45	2016-11-25 13:30:45	7
*/
